{"ast":null,"code":"var _jsxFileName = \"C:\\\\LearnReact\\\\investment-calculator\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport Header from './components/Investments/Header';\nimport InvestmentForm from './components/Investments/InvestmentForm';\nimport InvestmentTable from './components/Investments/InvestmentsTable';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Setting the state for calculate data\n  const [investmentData, setInvestmentData] = useState(null);\n  const calculateHandler = userInput => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const yearlyData = []; // per-year results\n\n    let currentSavings = +userInput['currentSavings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearlyContribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expectedReturn'] / 100;\n    const duration = +userInput['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n\n    // do something with yearlyData ...\n    const setInvestmentData = yearlyData;\n  };\n  // console.log(investmentData);\n  let content;\n  if (investmentData) {\n    content = 'No investment calculated yet';\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InvestmentForm, {\n      onCalculate: calculateHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), investmentData && content, investmentData && /*#__PURE__*/_jsxDEV(InvestmentTable, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 26\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"rP2Lc7703WiQ0BK0iB5XUuv31us=\");\n_c = App;\n;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Header","InvestmentForm","InvestmentTable","useState","jsxDEV","_jsxDEV","App","_s","investmentData","setInvestmentData","calculateHandler","userInput","yearlyData","currentSavings","yearlyContribution","expectedReturn","duration","i","yearlyInterest","push","year","savingsEndOfYear","content","children","fileName","_jsxFileName","lineNumber","columnNumber","onCalculate","_c","$RefreshReg$"],"sources":["C:/LearnReact/investment-calculator/src/App.js"],"sourcesContent":["import Header from './components/Investments/Header';\nimport InvestmentForm from './components/Investments/InvestmentForm';\nimport InvestmentTable from './components/Investments/InvestmentsTable';\nimport { useState } from 'react';\n\nfunction App() {\n  // Setting the state for calculate data\n  const [investmentData, setInvestmentData] = useState(null);\n\n  const calculateHandler = (userInput) => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const yearlyData = []; // per-year results\n\n    let currentSavings = +userInput['currentSavings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearlyContribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expectedReturn'] / 100;\n    const duration = +userInput['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution,\n      });\n    }\n\n    // do something with yearlyData ...\n    const setInvestmentData = yearlyData;\n  };\n  // console.log(investmentData);\n  let content;\n\n  if (investmentData) {\n    content = 'No investment calculated yet';\n  }\n\n  return (\n    <div>\n      <Header />\n\n      <InvestmentForm onCalculate={calculateHandler} />\n\n      {investmentData && content}\n      {investmentData && <InvestmentTable />}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,MAAM,MAAM,iCAAiC;AACpD,OAAOC,cAAc,MAAM,yCAAyC;AACpE,OAAOC,eAAe,MAAM,2CAA2C;AACvE,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAE1D,MAAMO,gBAAgB,GAAIC,SAAS,IAAK;IACtC;IACA;;IAEA,MAAMC,UAAU,GAAG,EAAE,CAAC,CAAC;;IAEvB,IAAIC,cAAc,GAAG,CAACF,SAAS,CAAC,gBAAgB,CAAC,CAAC,CAAC;IACnD,MAAMG,kBAAkB,GAAG,CAACH,SAAS,CAAC,oBAAoB,CAAC,CAAC,CAAC;IAC7D,MAAMI,cAAc,GAAG,CAACJ,SAAS,CAAC,gBAAgB,CAAC,GAAG,GAAG;IACzD,MAAMK,QAAQ,GAAG,CAACL,SAAS,CAAC,UAAU,CAAC;;IAEvC;IACA,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;MACjC,MAAMC,cAAc,GAAGL,cAAc,GAAGE,cAAc;MACtDF,cAAc,IAAIK,cAAc,GAAGJ,kBAAkB;MACrDF,UAAU,CAACO,IAAI,CAAC;QACd;QACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BG,gBAAgB,EAAER,cAAc;QAChCC,kBAAkB,EAAEA;MACtB,CAAC,CAAC;IACJ;;IAEA;IACA,MAAML,iBAAiB,GAAGG,UAAU;EACtC,CAAC;EACD;EACA,IAAIU,OAAO;EAEX,IAAId,cAAc,EAAE;IAClBc,OAAO,GAAG,8BAA8B;EAC1C;EAEA,oBACEjB,OAAA;IAAAkB,QAAA,gBACElB,OAAA,CAACL,MAAM;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEVtB,OAAA,CAACJ,cAAc;MAAC2B,WAAW,EAAElB;IAAiB;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAEhDnB,cAAc,IAAIc,OAAO,EACzBd,cAAc,iBAAIH,OAAA,CAACH,eAAe;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnC,CAAC;AAEV;AAACpB,EAAA,CAhDQD,GAAG;AAAAuB,EAAA,GAAHvB,GAAG;AAgDX;AAED,eAAeA,GAAG;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}