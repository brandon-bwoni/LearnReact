{"ast":null,"code":"var _jsxFileName = \"C:\\\\LearnReact\\\\investment-calculator\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport Header from './components/Investments/Header';\nimport InvestmentForm from './components/Investments/InvestmentForm';\nimport InvestmentTable from './components/Investments/InvestmentsTable';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Setting the state for calculate data\n  const [data, setData] = useState('');\n  setData(prevState => {\n    const calculateHandler = userInput => {\n      // Should be triggered when form is submitted\n      // You might not directly want to bind it to the submit event on the form though...\n\n      const yearlyData = []; // per-year results\n\n      let currentSavings = +userInput['currentSavings']; // feel free to change the shape of this input object!\n      const yearlyContribution = +userInput['yearlyContribution']; // as mentioned: feel free to change the shape...\n      const expectedReturn = +userInput['expectedReturn'] / 100;\n      const duration = +userInput['duration'];\n\n      // The below code calculates yearly results (total savings, interest etc)\n      for (let i = 0; i < duration; i++) {\n        const yearlyInterest = currentSavings * expectedReturn;\n        currentSavings += yearlyInterest + yearlyContribution;\n        yearlyData.push({\n          // feel free to change the shape of the data pushed to the array!\n          year: i + 1,\n          yearlyInterest: yearlyInterest,\n          savingsEndOfYear: currentSavings,\n          yearlyContribution: yearlyContribution\n        });\n      }\n\n      // do something with yearlyData ...\n      console.log(yearlyData);\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InvestmentForm, {\n      onAddInvestment: calculateHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InvestmentTable, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"C23+RLRwI6JvI86s3uCPD/CulQc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Header","InvestmentForm","InvestmentTable","useState","jsxDEV","_jsxDEV","App","_s","data","setData","prevState","calculateHandler","userInput","yearlyData","currentSavings","yearlyContribution","expectedReturn","duration","i","yearlyInterest","push","year","savingsEndOfYear","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","onAddInvestment","_c","$RefreshReg$"],"sources":["C:/LearnReact/investment-calculator/src/App.js"],"sourcesContent":["import Header from './components/Investments/Header';\nimport InvestmentForm from './components/Investments/InvestmentForm';\nimport InvestmentTable from './components/Investments/InvestmentsTable';\nimport { useState } from 'react';\n\nfunction App() {\n  // Setting the state for calculate data\n  const [data, setData] = useState('');\n\n  setData(prevState => {\n    const calculateHandler = (userInput) => {\n      // Should be triggered when form is submitted\n      // You might not directly want to bind it to the submit event on the form though...\n\n      const yearlyData = []; // per-year results\n\n      let currentSavings = +userInput['currentSavings']; // feel free to change the shape of this input object!\n      const yearlyContribution = +userInput['yearlyContribution']; // as mentioned: feel free to change the shape...\n      const expectedReturn = +userInput['expectedReturn'] / 100;\n      const duration = +userInput['duration'];\n\n      // The below code calculates yearly results (total savings, interest etc)\n      for (let i = 0; i < duration; i++) {\n        const yearlyInterest = currentSavings * expectedReturn;\n        currentSavings += yearlyInterest + yearlyContribution;\n        yearlyData.push({\n          // feel free to change the shape of the data pushed to the array!\n          year: i + 1,\n          yearlyInterest: yearlyInterest,\n          savingsEndOfYear: currentSavings,\n          yearlyContribution: yearlyContribution,\n        });\n      }\n\n      // do something with yearlyData ...\n      console.log(yearlyData);\n\n    };\n  });\n  return (\n    <div>\n      <Header />\n      <InvestmentForm onAddInvestment={calculateHandler} />\n      <InvestmentTable />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,MAAM,MAAM,iCAAiC;AACpD,OAAOC,cAAc,MAAM,yCAAyC;AACpE,OAAOC,eAAe,MAAM,2CAA2C;AACvE,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAEpCM,OAAO,CAACC,SAAS,IAAI;IACnB,MAAMC,gBAAgB,GAAIC,SAAS,IAAK;MACtC;MACA;;MAEA,MAAMC,UAAU,GAAG,EAAE,CAAC,CAAC;;MAEvB,IAAIC,cAAc,GAAG,CAACF,SAAS,CAAC,gBAAgB,CAAC,CAAC,CAAC;MACnD,MAAMG,kBAAkB,GAAG,CAACH,SAAS,CAAC,oBAAoB,CAAC,CAAC,CAAC;MAC7D,MAAMI,cAAc,GAAG,CAACJ,SAAS,CAAC,gBAAgB,CAAC,GAAG,GAAG;MACzD,MAAMK,QAAQ,GAAG,CAACL,SAAS,CAAC,UAAU,CAAC;;MAEvC;MACA,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;QACjC,MAAMC,cAAc,GAAGL,cAAc,GAAGE,cAAc;QACtDF,cAAc,IAAIK,cAAc,GAAGJ,kBAAkB;QACrDF,UAAU,CAACO,IAAI,CAAC;UACd;UACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;UACXC,cAAc,EAAEA,cAAc;UAC9BG,gBAAgB,EAAER,cAAc;UAChCC,kBAAkB,EAAEA;QACtB,CAAC,CAAC;MACJ;;MAEA;MACAQ,OAAO,CAACC,GAAG,CAACX,UAAU,CAAC;IAEzB,CAAC;EACH,CAAC,CAAC;EACF,oBACER,OAAA;IAAAoB,QAAA,gBACEpB,OAAA,CAACL,MAAM;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVxB,OAAA,CAACJ,cAAc;MAAC6B,eAAe,EAAEnB;IAAiB;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACrDxB,OAAA,CAACH,eAAe;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChB,CAAC;AAEV;AAACtB,EAAA,CAzCQD,GAAG;AAAAyB,EAAA,GAAHzB,GAAG;AA2CZ,eAAeA,GAAG;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}